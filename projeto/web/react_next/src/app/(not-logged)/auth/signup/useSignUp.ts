import { FormEvent, RefObject, useEffect, useRef, useState } from "react";
import signUp from "./functions/signUp";

export default function useSignUp() {
  const nameRef = useRef<HTMLInputElement>(null) as RefObject<HTMLInputElement>;
  const emailRef = useRef<HTMLInputElement>(null) as RefObject<HTMLInputElement>;
  const passwordRef = useRef<HTMLInputElement>(null) as RefObject<HTMLInputElement>;
  const confirmPasswordRef = useRef<HTMLInputElement>(null) as RefObject<HTMLInputElement>;
  const [permissions, setPermissions] = useState<string[]>([]);
  const possiblePermissions: Map<string, string> = new Map([["KITCHEN", "Cozinha"], ["WAITRESS", "Garçom"]]);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState<string>("");
  const [errorMessage, setErrorMessage] = useState<string>("");

  //?????????????????????????????????????????????????????????????????????????????????
  //? Metodos do hook
  //?????????????????????????????????????????????????????????????????????????????????
  function handlePermissionChange(e: React.ChangeEvent<HTMLInputElement>) {
    const value = e.target.value;
    setPermissions(prev =>
      prev.includes(value)
        ? prev.filter(p => p !== value)
        : [...prev, value]
    );
  }

  const signUpHandler = async (event: FormEvent<HTMLFormElement>) => {
    setIsLoading(true);
    try {
      event.preventDefault();
      const name = nameRef.current.value;
      const email = emailRef.current.value;
      const password = passwordRef.current.value;
      const confirmPassword = confirmPasswordRef.current.value;

      if (password !== confirmPassword)
        throw new Error("As senhas não conferem");

      if (permissions.length === 0)
        throw new Error("Selecione pelo menos uma permissão");

      const response = await signUp({ name, email, password, confirmPassword, permissions });
      if (response.status === 'error') {
        setErrorMessage(response.message);
        setMessage('');
      } else {
        setMessage(response.message);
        setErrorMessage('');
      }
    } catch (error) {
      let errMessage = 'Erro desconhecido. Tente novamente mais tarde.';
      if (error instanceof Error)
        errMessage = error.message;
      setErrorMessage(errMessage)
    } finally {
      setIsLoading(false);
    }
  }

  //?????????????????????????????????????????????????????????????????????????????????
  //? internal methods
  //?????????????????????????????????????????????????????????????????????????????????
  const clearRefs = () => {
    nameRef.current.value = "";
    emailRef.current.value = "";
    passwordRef.current.value = "";
    confirmPasswordRef.current.value = "";
    setPermissions([]);
  }
  //?????????????????????????????????????????????????????????????????????????????????
  //? useEffects
  //?????????????????????????????????????????????????????????????????????????????????
  useEffect(() => {
    if (message) {
      clearRefs();
      const timer = setTimeout(() => setMessage(""), 3000);
      return () => clearTimeout(timer);
    }

    if (errorMessage) {
      const timer = setTimeout(() => setErrorMessage(""), 3000);
      return () => clearTimeout(timer);
    }
  }, [message, errorMessage]);

  return {
    nameRef, emailRef, passwordRef, confirmPasswordRef, permissions, possiblePermissions, //relacionados aos inputs e usuário
    handlePermissionChange, signUpHandler, //relacionados aos eventos
    isLoading, //relacionado ao estado de carregamento
    message, errorMessage, //relacionadas as mensagens    
  }
}