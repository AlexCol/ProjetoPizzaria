import axios, { AxiosError } from 'axios';

//??????????????????????????????????????????????????????????????????????????????
//? INICIALIZAÇÕES
//??????????????????????????????????????????????????????????????????????????????
const baseUrl = process.env.NEXT_PUBLIC_API;
const core = axios.create({
  baseURL: baseUrl,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true, // Permite o envio de cookies com as requisições
});

//??????????????????????????????????????????????????????????????????????????????
//? TIPAGEM
//??????????????????????????????????????????????????????????????????????????????
type apiProps = {
  method: 'get' | 'post' | 'put' | 'delete' | 'patch';
  url: string;
  data?: any;
  params?: any;
}

//??????????????????????????????????????????????????????????????????????????????
//? FUNÇÕES PUBLICA
//??????????????????????????????????????????????????????????????????????????????
const api = async (config: apiProps) => {
  try {
    const response = await core.request({
      method: config.method,
      url: config.url,
      data: config.data,
      params: config.params,
    });
    return response.data;
  } catch (error) {
    if (error instanceof AxiosError && await canTryAgain(error)) {
      try {
        const response = await core.request({
          method: config.method,
          url: config.url,
          data: config.data,
          params: config.params,
        });
        return response.data;
      } catch (error) {
        handleException(error);
      }
    }
    handleException(error);
  }
}
export default api;

//??????????????????????????????????????????????????????????????????????????????
//? FUNÇÕES PRIVADAS
//??????????????????????????????????????????????????????????????????????????????
async function canTryAgain(error: AxiosError) {
  if (!error.response) return false; // Se não houver resposta, não é possível tentar novamente
  const statusCode = error.response.status;
  if (statusCode !== 401)
    return false;

  try {
    await core.request({
      method: 'post',
      url: '/auth/refresh',
    });
    return true;
  } catch (error) {
    //console.log(error);
    return false;
  }
}

function handleException(error: any) {
  let errorMessage = error instanceof Error ? error.message : 'Ocorreu um erro desconhecido';

  if (error instanceof AxiosError)
    errorMessage = error.response?.data?.message || errorMessage;

  throw new Error(errorMessage);
}

//??????????????????????????????????????????????????????????????????????????????
//? FUNÇÕES AUXILIARES PARA MANIPULAÇÃO DO HEADER
//??????????????????????????????????????????????????????????????????????????????
export function setRememberMe(rememberMe: boolean) {
  rememberMe = rememberMe || localStorage.getItem('rememberMe') === 'true';
  if (!rememberMe) {
    delete core.defaults.headers.common['remember-me']; // Remove o token se não for fornecido
  } else {
    core.defaults.headers.common['remember-me'] = rememberMe; // Define o token no cabeçalho Authorization
    localStorage.setItem('rememberMe', rememberMe.toString());
  }
}

export function forgetMe() {
  delete core.defaults.headers.common['remember-me'];
  localStorage.removeItem('rememberMe');
}