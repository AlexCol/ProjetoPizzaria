import api from '@/services/api';
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

//??????????????????????????????????????????????????????????????????????????????
//? Criando os tipos para o estado
//??????????????????????????????????????????????????????????????????????????????
type UserState = {
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  message: string;
}

//??????????????????????????????????????????????????????????????????????????????
//? Criando os tipos usados nos Thunks
//? UserSignUp é o tipo do objeto que será passado como parâmetro para a ação de signup
//??????????????????????????????????????????????????????????????????????????????
type UserSignUp = {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
  permissions: string[];
}

//??????????????????????????????????????????????????????????????????????????????
//? Declarando o estado inicial do slice
//??????????????????????????????????????????????????????????????????????????????
const initialState: UserState = {
  status: 'idle',
  message: '',
}

//??????????????????????????????????????????????????????????????????????????????
//? Criando Thunks para o slice
//? Thunks podem ser adicionados aqui, se precisar de operações assíncronas, 
//? por exemplo, chamadas de API. Cada thunk pode gerenciar seus próprios 
//? estados de carregamento, sucesso e erro nos extraReducers abaixo.
//??????????????????????????????????????????????????????????????????????????????
//primeiro parametro 'void', não espero retorno
//segundo parametro: UserSignUp, tipo do objeto que será passado como parâmetro para a ação de signup
//terceiro parametro: AsyncThunkConfig, desestruturado pois só precisamos do rejectValue
export const signup = createAsyncThunk<UserState, UserSignUp, { rejectValue: string }>(
  'user/signup', // nome da ação, pode ser qualquer string, só não pode ser repetida entre Thunks
  async (params, { rejectWithValue }) => { //não precisa tipar params, pois foi tipado na definição do thunk
    try {
      await api({
        method: 'post',
        url: '/users',
        data: params
      });

      return {
        status: 'succeeded',
        message: 'Usuário cadastrado com sucesso'
      };
    } catch (error) { //erro é tratado na 'api', vem como erro generico por conveniência
      let errorMessage = 'Erro desconhecido';
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      return rejectWithValue(errorMessage);
    }
  }
)

//??????????????????????????????????????????????????????????????????????????????
//? Criando o slice
//??????????????????????????????????????????????????????????????????????????????
const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: { //melhor usados para ações síncronas e simples, como esse reset que limpa o estado
    userReset: (state) => {
      state.status = 'idle';
      state.message = '';
    },
  },
  extraReducers: (builder) => { //melhor usados para ações assíncronas, como o loginUsers
    builder
      .addCase(signup.pending, (state) => {
        state.status = 'loading';
        state.message = '';
      })
      .addCase(signup.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.message = "Usuário cadastrado com sucesso. Realize login para continuar."
      })
      .addCase(signup.rejected, (state, action) => {
        state.status = 'failed';
        state.message = action.payload || 'Erro ao fazer login'
      })
  }
})

export const { userReset } = userSlice.actions;

const userReducer = userSlice.reducer
export default userReducer;